name: Package NuGet

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  SONAR_PROJECT_KEY: Bank.Domain
  SONAR_ORGANIZATION: # Agregar tu organización de SonarCloud aquí
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore Bank/Bank.sln
    
    - name: Build solution
      run: dotnet build Bank/Bank.sln --configuration Release --no-restore
    
    - name: Run unit tests with coverage
      run: |
        cd Bank
        dotnet test Bank.Domain.Tests/Bank.Domain.Tests.csproj \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --logger trx \
          --logger "console;verbosity=detailed"
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: Bank/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: |
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
          -Dsonar.cs.opencover.reportsPaths=Bank/**/coverage.opencover.xml
          -Dsonar.coverage.exclusions=**/TestResults/**,**/Tests/**,**/*Tests.cs,**/*Test.cs
          -Dsonar.exclusions=**/bin/**,**/obj/**,**/TestResults/**,**/_site/**
          -Dsonar.sources=Bank/Bank.Domain
          -Dsonar.tests=Bank/Bank.Domain.Tests
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: NUnit Tests
        path: Bank/**/*.trx
        reporter: dotnet-trx
        fail-on-error: true

  package-and-publish:
    runs-on: ubuntu-latest
    needs: test-and-analyze
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore Bank/Bank.sln
    
    - name: Build solution
      run: dotnet build Bank/Bank.sln --configuration Release --no-restore
    
    - name: Pack NuGet package
      run: |
        cd Bank/Bank.Domain
        dotnet pack --configuration Release --no-build --output ./nupkg
    
    - name: Publish to GitHub Packages
      run: |
        cd Bank/Bank.Domain/nupkg
        dotnet nuget push "*.nupkg" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          --skip-duplicate
